ASSIGNMENT NO 11: 
implement the following MongoDb Query
    1. Create a collection named books.
    2. Insert 5 records with field TITLE,DESCRIPTION,BY,URL,TAGS AND LIKES
    3. Insert 1 more document in collection with additional field of user name and comments.
    4. Display all the documents whose title is 'mongodb'.
    5. Display all the documents written by 'john' or whose title is 'mongodb'.
    6. Display all the documents whose title is 'mongodb' and written by 'john'.
    7. Display all the documents whose like is greater than 150.
    8. Display all the documents whose like is greater than 100 and whose title is either 'mongodb' or written by 'john'.
    9. Update the title of 'mongodb' document to 'mongodb overview'
    10. Delete the document titled 'nosql overview'.
    11. Display exactly two documents written by 'john'.
    12. Display the second document published by 'john'.
    13. Display all the books in the sorted fashion.
    14. Update the Author of TOC book to Vivek Kulkarni, if record does not exist new document should create

'''
q1=== Create a collection named books

db.createCollection("books")

q2===Insert 5 records with field TITLE,DESCRIPTION,AUTHOR,URL,TAGS AND LIKES

db.books.insertOne({
title:'mongodb',
description:'MomngoDB CRUD operation',
author:'geeksforgeeks',
url:'www,mongodbpress.com',
tags:['mongodb','database','NOSQL'],
likes:150})

db.books.insertOne({
title:'nosql overview',
description:'Introduction to NOSQL',
author:'john',
url:'www,mongodbpress.com',
tags:['mongodb','database','NOSQL'],
likes:1500})


db.books.insertOne({
title:'mongodb',
description:'Introduction to mongoDB',
author:'john',
url:'www,mongodbpress.com',
tags:['mongodb','database','NOSQL'],
likes:1200})

db.books.insertOne({
title:'mongodb',
description:'Introduction to mongoDB',
author:'john',
url:'www,mongodbpress.com',
tags:['mongodb','database','NOSQL'],
likes:100})

q3===Insert 1 more document in collection with additional field of user name and comments.

db.books.insert({
   title: 'xyzc',
user_name:'harsh5',
comments:'terror5', 
   description: 'MongoDB is no sql database5',
   author: 'tutorials point5',
   url: 'http://www.tutorialspoint5.com',
   tags: ['mongodb5', 'database5', 'NoSQL5'],
   likes: 1005
})




q4===Display all the documents whose title is 'mongodb'.
db.books.find({title:"mongodb"})


q5===Display all the documents written author 'john' or whose title is 'mongodb'.
db.books.find({$or:[{title:"mongodb"},{author: "john"}]})


q6===Display all the documents written author 'john' and whose title is 'mongodb'.
db.books.find({$and:[{title:"mongodb"},{author: "john"}]})


q7===Display all the documents whose like is greater than 150.
db.books.find({likes:{$gt:1000}})


q8===Display all the documents whose like is greater than 1000 and whose title is either 'mongodb' or written by 'john'
db.books.find({likes:{$gt:1000},$or:[{title:"mongodb"},{author:"john"}]})


q9===Update the title of 'mongodb' document to 'mongodb overview'
db.books.updateMany({title:"mongodb"},{$set:{title:"mongodb overview"}})

q10===Delete the document titled 'nosql overview'.
db.books.deleteOne({title:"nosql overview"})

q11===Display exactly two documents written by 'john'.
db.books.find({author:"john"}).limit(2)

q12== Display the second document published by 'john'.
db.books.find({author:"john"}).limit(1).skip(1)


q13==Display all the books in the sorted fashion.
db.books.find().sort({likes:-1}) 		-----Descending order
db.books.find().sort({likes:1}) 		-----Ascending order

q14==Update the Author of TOC book to Vivek Kulkarni, if record does not exist new document should create
db.books.update( { title: "TOC" },{$set: {author: "Vivek kulkarni"}},{upsert:true})

